{"version":3,"sources":["index.js"],"names":["keySet","id","val","isOperator","isOperand","Button","props","className","onClick","Calculator","state","input","output","evalStatus","handleClick","bind","handleAction","undefined","find","x","this","test","setState","prevState","split","slice","length","substr","result","exprsn","forEach","i","negVal","a","parseFloat","b","splice","console","log","calc","map","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a679295.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst keySet = [\n  [{ id: \"clear\", val: \"AC\" }, { id: \"equals\", val: \"=\" }],\n  [\n    { id: \"nine\", val: \"9\" },\n    { id: \"eight\", val: \"8\" },\n    { id: \"seven\", val: \"7\" },\n    { id: \"six\", val: \"6\" },\n    { id: \"five\", val: \"5\" },\n    { id: \"four\", val: \"4\" },\n    { id: \"three\", val: \"3\" },\n    { id: \"two\", val: \"2\" },\n    { id: \"one\", val: \"1\" },\n    { id: \"decimal\", val: \".\" },\n    { id: \"zero\", val: \"0\" }\n  ],\n  [\n    { id: \"add\", val: \"+\" },\n    { id: \"subtract\", val: \"-\" },\n    { id: \"multiply\", val: \"x\" },\n    { id: \"divide\", val: \"/\" }\n  ]\n];\n\nconst isOperator = /[x/+-]/;\nconst isOperand = /[\\d]+|[.]/;\nconst isNonNegOp = /[x/+]/;\n\nconst calc = exprsn => {\n  let result = exprsn.split(\",\");\n  result.forEach((x, i) => {\n    if (x === \"/\") {\n      let negVal = result[i + 1] === \"-\" ? true : false;\n      let a = parseFloat(result[i - 1]);\n      let b = parseFloat(negVal ? result[i + 2] * -1 : result[i + 1]);\n\n      result.splice(i - 1, 3 + (negVal ? 1 : 0), a / b);\n      i = i - (negVal ? 2 : 1);\n    }\n  });\n  result.forEach((x, i) => {\n    if (x === \"x\") {\n      let negVal = result[i + 1] === \"-\" ? true : false;\n      let a = parseFloat(result[i - 1]);\n      let b = parseFloat(negVal ? result[i + 2] * -1 : result[i + 1]);\n      console.log(a, b);\n      result.splice(i - 1, 3 + (negVal ? 1 : 0), a * b);\n      i = i - (negVal ? 2 : 1);\n    }\n  });\n  for (let i = 0; i < result.length; ++i) {\n    if (result[i] === \"+\") {\n      let a = parseFloat(result[i - 1]);\n      let b = parseFloat(result[i + 1]);\n      result.splice(i - 1, 3, a + b);\n      i--;\n    }\n    if (result[i] === \"-\") {\n      let a = parseFloat(result[i - 1]);\n      let b = parseFloat(result[i + 1]);\n      result.splice(i - 1, 3, a - b);\n      i--;\n    }\n  }\n  return (1000000000000 * result) / 1000000000000;\n};\nconst Button = props => {\n  return (\n    <div id={props.id} className=\"key\" onClick={props.onClick}>\n      {props.val}\n    </div>\n  );\n};\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      output: \"\",\n      evalStatus: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleAction = this.handleAction.bind(this);\n  }\n  handleClick(val) {\n    //\n    if (keySet[0].find(x => x.val === val) !== undefined) {\n      //if actionkey is pressed\n      this.handleAction(val);\n    } else if (isOperand.test(val)) {\n      //if operandkey is pressed\n      this.setState(prevState => {\n        let input, output;\n        input = prevState.evalStatus ? \"\" : prevState.input;\n        output = prevState.evalStatus ? \"\" : prevState.output;\n\n        if (isOperator.test(prevState.input)) {\n          input = \"\";\n          output = output + \",\";\n        }\n        switch (val) {\n          case \"0\":\n            input = input != \"0\" ? input + val : input;\n            output = prevState.input != \"0\" ? output + val : output;\n            break;\n          case \".\":\n            output =\n              prevState.input.split(\"\").find(x => x == \".\") == undefined\n                ? input != \"\"\n                  ? output + \".\"\n                  : output + \"0.\"\n                : output;\n            input =\n              input.split(\"\").find(x => x == \".\") == undefined\n                ? input != \"\"\n                  ? input + \".\"\n                  : input + \"0.\"\n                : input;\n\n            break;\n          default:\n            input = input != \"0\" ? input + val : val;\n            output = output + val;\n            break;\n        }\n\n        return {\n          input: input,\n          output: output,\n          evalStatus: false\n        };\n      });\n    } else {\n      //if operatorkey is pressed\n      this.setState(prevState => {\n        let output = prevState.evalStatus\n          ? prevState.output.split(\"=\").slice(1)\n          : prevState.output;\n\n        if (val == \"-\") {\n          if (prevState.input == \"-\") {\n            /*do nothing*/\n          } else {\n            output = output + \",\" + val;\n          }\n        } else {\n          if (isOperator.test(prevState.input)) {\n            if (isOperator.test(output[output.length - 3]))\n              output = output.substr(0, output.length - 4);\n            else {\n              output = output.substr(0, output.length - 2);\n            }\n            output = output + \",\" + val;\n          } else {\n            output = output + \",\" + val;\n          }\n        }\n\n        return {\n          input: val,\n          output: output,\n          evalStatus: false\n        };\n      });\n    }\n  }\n\n  handleAction(val) {\n    if (val === \"AC\") this.setState({ input: 0, output: \"\" });\n    else {\n      let result = calc(this.state.output);\n      this.setState(prevState => {\n        return {\n          input: result,\n          output:\n            result != \"\" ? prevState.output + \"=\" + result : prevState.output,\n          evalStatus: result != \"\" ? true : false\n        };\n      });\n    }\n  }\n  render() {\n    return (\n      <div id=\"calculator\">\n        <div id=\"display-block\">\n          <div id=\"output\">{this.state.output.split(\",\")}</div>\n          <div id=\"display\">{this.state.input}</div>\n        </div>\n\n        <div id=\"actionkeys\">\n          {keySet[0].map(x => (\n            <Button\n              id={x.id}\n              val={x.val}\n              onClick={() => this.handleClick(x.val)}\n            />\n          ))}\n        </div>\n        <div id=\"operandkeys\">\n          {keySet[1].map(x => (\n            <Button\n              id={x.id}\n              val={x.val}\n              onClick={() => this.handleClick(x.val)}\n            />\n          ))}\n        </div>\n        <div id=\"operatorkeys\">\n          {keySet[2].map(x => (\n            <Button\n              id={x.id}\n              val={x.val}\n              onClick={() => this.handleClick(x.val)}\n            />\n          ))}\n        </div>\n        <div id=\"footer\">© elizabeth vincent m</div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}